/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RankingsRouteImport } from './routes/rankings'
import { Route as IndexRouteImport } from './routes/index'
import { Route as EventsIndexRouteImport } from './routes/events/index'
import { Route as EventsDemoRouteImport } from './routes/events/demo'
import { Route as EventsDemoIndexRouteImport } from './routes/events/demo.index'
import { Route as EventsDemoUpcomingRouteImport } from './routes/events/demo.upcoming'
import { Route as EventsDemoEntriesRouteImport } from './routes/events/demo.entries'
import { Route as EventsDemoBracketsRouteImport } from './routes/events/demo.brackets'

const RankingsRoute = RankingsRouteImport.update({
  id: '/rankings',
  path: '/rankings',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIndexRoute = EventsIndexRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsDemoRoute = EventsDemoRouteImport.update({
  id: '/events/demo',
  path: '/events/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsDemoIndexRoute = EventsDemoIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EventsDemoRoute,
} as any)
const EventsDemoUpcomingRoute = EventsDemoUpcomingRouteImport.update({
  id: '/upcoming',
  path: '/upcoming',
  getParentRoute: () => EventsDemoRoute,
} as any)
const EventsDemoEntriesRoute = EventsDemoEntriesRouteImport.update({
  id: '/entries',
  path: '/entries',
  getParentRoute: () => EventsDemoRoute,
} as any)
const EventsDemoBracketsRoute = EventsDemoBracketsRouteImport.update({
  id: '/brackets',
  path: '/brackets',
  getParentRoute: () => EventsDemoRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/rankings': typeof RankingsRoute
  '/events/demo': typeof EventsDemoRouteWithChildren
  '/events': typeof EventsIndexRoute
  '/events/demo/brackets': typeof EventsDemoBracketsRoute
  '/events/demo/entries': typeof EventsDemoEntriesRoute
  '/events/demo/upcoming': typeof EventsDemoUpcomingRoute
  '/events/demo/': typeof EventsDemoIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/rankings': typeof RankingsRoute
  '/events': typeof EventsIndexRoute
  '/events/demo/brackets': typeof EventsDemoBracketsRoute
  '/events/demo/entries': typeof EventsDemoEntriesRoute
  '/events/demo/upcoming': typeof EventsDemoUpcomingRoute
  '/events/demo': typeof EventsDemoIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/rankings': typeof RankingsRoute
  '/events/demo': typeof EventsDemoRouteWithChildren
  '/events/': typeof EventsIndexRoute
  '/events/demo/brackets': typeof EventsDemoBracketsRoute
  '/events/demo/entries': typeof EventsDemoEntriesRoute
  '/events/demo/upcoming': typeof EventsDemoUpcomingRoute
  '/events/demo/': typeof EventsDemoIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/rankings'
    | '/events/demo'
    | '/events'
    | '/events/demo/brackets'
    | '/events/demo/entries'
    | '/events/demo/upcoming'
    | '/events/demo/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/rankings'
    | '/events'
    | '/events/demo/brackets'
    | '/events/demo/entries'
    | '/events/demo/upcoming'
    | '/events/demo'
  id:
    | '__root__'
    | '/'
    | '/rankings'
    | '/events/demo'
    | '/events/'
    | '/events/demo/brackets'
    | '/events/demo/entries'
    | '/events/demo/upcoming'
    | '/events/demo/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RankingsRoute: typeof RankingsRoute
  EventsDemoRoute: typeof EventsDemoRouteWithChildren
  EventsIndexRoute: typeof EventsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/rankings': {
      id: '/rankings'
      path: '/rankings'
      fullPath: '/rankings'
      preLoaderRoute: typeof RankingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/demo': {
      id: '/events/demo'
      path: '/events/demo'
      fullPath: '/events/demo'
      preLoaderRoute: typeof EventsDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/demo/': {
      id: '/events/demo/'
      path: '/'
      fullPath: '/events/demo/'
      preLoaderRoute: typeof EventsDemoIndexRouteImport
      parentRoute: typeof EventsDemoRoute
    }
    '/events/demo/upcoming': {
      id: '/events/demo/upcoming'
      path: '/upcoming'
      fullPath: '/events/demo/upcoming'
      preLoaderRoute: typeof EventsDemoUpcomingRouteImport
      parentRoute: typeof EventsDemoRoute
    }
    '/events/demo/entries': {
      id: '/events/demo/entries'
      path: '/entries'
      fullPath: '/events/demo/entries'
      preLoaderRoute: typeof EventsDemoEntriesRouteImport
      parentRoute: typeof EventsDemoRoute
    }
    '/events/demo/brackets': {
      id: '/events/demo/brackets'
      path: '/brackets'
      fullPath: '/events/demo/brackets'
      preLoaderRoute: typeof EventsDemoBracketsRouteImport
      parentRoute: typeof EventsDemoRoute
    }
  }
}

interface EventsDemoRouteChildren {
  EventsDemoBracketsRoute: typeof EventsDemoBracketsRoute
  EventsDemoEntriesRoute: typeof EventsDemoEntriesRoute
  EventsDemoUpcomingRoute: typeof EventsDemoUpcomingRoute
  EventsDemoIndexRoute: typeof EventsDemoIndexRoute
}

const EventsDemoRouteChildren: EventsDemoRouteChildren = {
  EventsDemoBracketsRoute: EventsDemoBracketsRoute,
  EventsDemoEntriesRoute: EventsDemoEntriesRoute,
  EventsDemoUpcomingRoute: EventsDemoUpcomingRoute,
  EventsDemoIndexRoute: EventsDemoIndexRoute,
}

const EventsDemoRouteWithChildren = EventsDemoRoute._addFileChildren(
  EventsDemoRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RankingsRoute: RankingsRoute,
  EventsDemoRoute: EventsDemoRouteWithChildren,
  EventsIndexRoute: EventsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
